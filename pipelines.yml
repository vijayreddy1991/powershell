resources:
      
  - name: myRepo
    type: GitRepo
    configuration:
      gitProvider: vijay_git
      path: vijayreddy1991/powershell
      
#   - name: winAuto_image
#     type: Image
#     configuration:
#       registry: vijay_docker
#       imageName: shippabledocker/jfreq_win
#       imageTag: latest

pipelines:

  - name: vijay_pipeline
    steps:  
      - name: functions
        type: PowerShell
        configuration:
          nodePool: windows-static
#           integrations:
#             - name: slack            
          inputResources:
            - name: myRepo
#           outputResources:
#             - name: winAuto_image

        execution:
          onExecute:
            - find_resource_variable myRepo $res_myRepo_resourcePath
#             - replicate_resource myTestImage myStageImage
            - $testvariable
            - $vijay
            #pipelines
            - get-childitem $res_myRepo_resourcePath
            - Push-Location $res_myRepo_resourcePath
            - get-childitem $step_tmp_dir
#             - bump_semver v3.0.0 major
#             - bump_semver v3.0.0 minor
#             - bump_semver v3.0.0 patch
#             - bump_semver v3.0.0 beta  
# #             - retry_command printen
# #             - replace_envs "$res_myRepo_resourcePath\keys" 
#             - $env:tempPath = $env:Path
#             - $env:Path = $env:Path + ';' + ((Get-Command git).Path -replace 'cmd\\git\.exe$','usr\bin')
#             - echo $env:Path  
#             - execute_command Get-Host
#             - compare_git -Path "$res_myRepo_resourcePath" -commit-range master..HEAD~4 
#             - compare_git -Path "$res_myRepo_resourcePath" -commit-range master..HEAD~4 | Foreach ($file) { Write-Output "pipelines.yml"} 
#             - compare_git -Path "$res_myRepo_resourcePath" -commit-range master..HEAD~4 -depth 2
#             - compare_git myRepo -commit-range master..HEAD~4 -directories-only
#             - compare_git myRepo -commit-range master..HEAD~4 -directories-only -depth 2
#             - Set-Content -Path "test.json" -Value "{'username':'Test','attachments':[{'pretext':'This is','text':'to test','color':'#5183a0'}],'icon_url':'${opt_icon_url}'}"
# #             - read_json -Path "$res_myRepo_resourcePath\test.json" "username"
# #             - update_commit_status myRepo -context "Windows" -message "testing step $step_id" -status failure
#             - update_commit_status myRepo -context "Windows" -message "testing step $step_id" -status failure      
#             - add_run_variables testvariable="asdffdjksfjk.    1"
#             - add_run_variables "scm=gitRepo" 'runVariable1="A string with spaces."' runVariable2='A string with $.'
#             - add_pipeline_variables vijay="kumar.      1"   
#             - add_pipeline_variables "scm=gitRepo" 'runVariable1="A string with spaces."' runVariable2='A string with $.'
#             - send_notification slack
#             - $testvariable
#             - $vijay
#             - Get-Variable | format-table
#             - write_output winAuto_image "imageTag=$run_id"    
#             - choco install python3
#             - python --version
#             - python -m pip install --upgrade pip
#             - pip --version
#             - pip install pytest
#             - pytest --version
#             - Push-Location $res_myRepo_resourcePath
#             - get-childitem $res_myRepo_resourcePath
#             #- pytest tests/test_sample.py
#             - py.test --verbose --junit-xml test-reports/results.xml test_sample.py       
#             - Get-Content -Path test-reports/results.xml
#             - save_tests test-reports/results.xml      
#             - add_run_variables "scm=gitRepo" 'runVariable1="A string with spaces."' runVariable2='A string with $.'
#             - add_run_variables "scm=gitRepo"
#             - export_run_variables "windows=poweshell"
#             - add_pipeline_variables "scm=s_gitHub"
#             - export_pipeline_variables "jfrog=pipelines"    
            - add_run_files -sources "$res_myRepo_resourcePath" -name repo_pipe   
            - add_pipeline_variables "scm=s_gitHub"
            - export_pipeline_variables "jfrog=pipelines"  
            - add_pipeline_variables "providername=GitHub" 'pipelineVariable1="A string with spaces."' pipelineVariable2='A string with $.'
            - add_pipeline_files -sources "$res_myRepo_resourcePath" -name vijay    
            - add_pipeline_variables pipelineVariable="asdffdjksfj.       k455457457"
            - export_pipeline_variables
            - add_run_variables runVariable="asdffdjksfj.       k455457457"
            - export_run_variables   
            - try { get-childitem $step_workspace_dir\download\cache } catch {$_}
            - try {restore_cache_files -name myCount -path "."} catch {$_}
            - ls
            - try {cat myCount} catch {$_}
            - try {restore_cache_files -name repo_pipe -path "$step_tmp_dir"} catch {$_}
            - ls $step_tmp_dir
            - try {restore_cache_files -name myDirs -path "$step_tmp_dir"} catch {$_}
            - ls $step_tmp_dir
            - try {restore_cache_files -name myFiles -path "$step_tmp_dir"} catch {$_}
            - ls $step_tmp_dir
            - try {restore_cache_files -name myMixed -path "$step_tmp_dir"} catch {$_}
            - ls $step_tmp_dir
            - if (!(test-path "sum.txt")) {Set-Content -Path "sum.txt" -Value "{`"count`":1}"}
            - if (test-path "sum.txt") {$contents = get-content sum.txt | ConvertFrom-Json ; $contents.count +=1; $contents | convertTo-Json | set-content -Path "sum.txt" }
            - try {$count = (Get-Content sum.txt | ConvertFrom-Json).count ; write-output "count is -- $count"} catch {$_}
            - try {add_cache_files -sources sum.txt -name myCount} catch {$_}
            - add_cache_files -sources "$res_myRepo_resourcePath" -name repo_pipe            
            
      - name: functions2
        type: PowerShell
        configuration:
          nodePool: windows-static             
          inputSteps:
            - name: functions
        execution:
          onExecute:
            - get-childitem $res_myRepo_resourcePath    
            - restore_run_files -name repo_pipe -path $step_tmp_dir   
            - get-childitem $res_myRepo_resourcePath    
            - echo $pipelineVariable                        
            - echo $runVariable       
            
      - name: functions3
        type: PowerShell
        configuration:
          nodePool: windows-static             
          inputSteps:
            - name: functions2
        execution:
          onExecute:
            - get-childitem $res_myRepo_resourcePath    
            - echo $pipelineVariable                       
            - restore_pipeline_files -name vijay -path $step_tmp_dir
            - get-childitem $step_tmp_dir   
            - echo $runVariable            
            

            
